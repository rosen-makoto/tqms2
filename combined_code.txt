--- START FILE: tqms2.code-workspace ---

{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {}
}

--- END FILE: tqms2.code-workspace ---


--- START FILE: manage.py ---

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tqms.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


--- END FILE: manage.py ---


--- START FILE: documents/admin.py ---

from django.contrib import admin
from .models import DocumentType, DocumentChange, Document, DocumentRevision, DocumentRevisionPreviousRevisionActionTag, DocumentRevisionInputPart, DocumentRevisionOutputPart, DocumentRevisionAttachedFile, DocumentRevisionProcessStep

admin.site.register(DocumentType)
admin.site.register(DocumentChange)
admin.site.register(Document)
admin.site.register(DocumentRevision)
admin.site.register(DocumentRevisionPreviousRevisionActionTag)
admin.site.register(DocumentRevisionInputPart)
admin.site.register(DocumentRevisionOutputPart)
admin.site.register(DocumentRevisionAttachedFile)
admin.site.register(DocumentRevisionProcessStep)


--- END FILE: documents/admin.py ---


--- START FILE: documents/models.py ---

from django.conf import settings
from django.db import models
from .choices import DESIGN_OWNERSHIP_CHOICES, MANUFACTURING_OPTIONS_CHOICES, FINISHED_DEVICE_CHOICES
from organization.models import Role, Location

class DocumentType(models.Model):
    display_name = models.CharField(max_length=255)
    code = models.CharField(max_length=255, unique=True)
    description = models.TextField()

    def __str__(self):
        return f'{self.display_name} ({self.code})'

class DocumentRevisionPreviousRevisionActionTag(models.Model):
    display_name = models.CharField(max_length=255)
    description = models.TextField()

    def __str__(self):
        return f'{self.display_name}'

class DocumentChange(models.Model):
    title = models.CharField(max_length=255)
    owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    reason_for_change = models.TextField()
    description_of_change = models.TextField()

    def __str__(self):
        return f'DC-{self.pk} - {self.title}'

class Document(models.Model):
    control_number = models.CharField(max_length=255, unique=True)
    legacy_control_number = models.CharField(max_length=255, blank=True, unique=True)
    document_type = models.ForeignKey(DocumentType, on_delete=models.CASCADE)
    
    def __str__(self):
        if self.legacy_control_number:
            return f'{self.document_type.code}-{self.control_number} ({self.legacy_control_number})'
        else:
            return f'{self.document_type.code}-{self.control_number}'

class DocumentRevision(models.Model):
    document = models.ForeignKey(Document, on_delete=models.CASCADE)
    document_change = models.ForeignKey(DocumentChange, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    major_revision = models.CharField(max_length=255)
    legacy_revision = models.CharField(max_length=255, blank=True)
    design_ownership = models.CharField(max_length=255, choices=DESIGN_OWNERSHIP_CHOICES, default='SELF')
    manufacturing_options = models.CharField(max_length=255, choices=MANUFACTURING_OPTIONS_CHOICES, default='SELF')
    finished_device = models.CharField(max_length=255, choices=FINISHED_DEVICE_CHOICES, default='NO')
    
    # Change relevant
    change_description = models.TextField()
    previous_revision_disposition = models.TextField()
    previous_revision_action_tags = models.ManyToManyField(DocumentRevisionPreviousRevisionActionTag, blank=True)

    # Only used for documents with a process subsection
    process_purpose_and_scope = models.TextField(blank=True)
    process_set_roles_by_step = models.BooleanField(default=False)
    process_roles = models.ManyToManyField(Role, blank=True)
    process_set_locations_by_step = models.BooleanField(default=False)
    process_locations = models.ManyToManyField(Location, blank=True)

    # Only used for shippable finished device
    device_identifier_number = models.CharField(max_length=255, blank=True)

    class Meta:
        unique_together = ('document', 'major_revision')
    
    def __str__(self):
        if self.legacy_revision:
            return f'{self.document} - Rev. {self.major_revision} (Legacy Rev. {self.legacy_revision})'
        else:
            return f'{self.document} - Rev. {self.major_revision}'

class DocumentRevisionInputPart(models.Model):
    document_revision = models.ForeignKey(DocumentRevision, on_delete=models.CASCADE)
    input_part = models.ForeignKey(Document, on_delete=models.CASCADE)
    order = models.PositiveIntegerField()
    quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f'{self.document_revision} Input Part: {self.input_part}'
    
    class Meta:
        unique_together = ('document_revision', 'input_part')

class DocumentRevisionOutputPart(models.Model):
    # Some process documents can describe how to make multiple parts.
    document_revision = models.ForeignKey(DocumentRevision, on_delete=models.CASCADE)
    output_part = models.ForeignKey(Document, on_delete=models.CASCADE)
    order = models.PositiveIntegerField()

    def __str__(self):
        return f'{self.document_revision} Output Part: {self.output_part}'
    
    class Meta:
        unique_together = ('document_revision', 'output_part')

class DocumentRevisionAttachedFile(models.Model):
    document_revision = models.ForeignKey(DocumentRevision, on_delete=models.CASCADE)
    file = models.FileField(upload_to='document_revision_attached_files/')
    description = models.TextField()
    order = models.PositiveIntegerField()

    def __str__(self):
        return f'{self.document_revision} Attached File: {self.file.name}'

class DocumentRevisionProcessStep(models.Model):
    document_revision = models.ForeignKey(DocumentRevision, on_delete=models.CASCADE)
    order = models.PositiveIntegerField()
    roles = models.ManyToManyField(Role, blank=True)
    locations = models.ManyToManyField(Location, blank=True)
    description = models.TextField()
    image = models.ImageField(upload_to='document_revision_process_step_images/', blank=True)

    def __str__(self):
        return f'{self.document_revision} Process{self.process_document}'

class DocumentRevisionPolicySection(models.Model):
    document_revision = models.ForeignKey(DocumentRevision, on_delete=models.CASCADE)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True)
    order = models.PositiveIntegerField()
    header = models.CharField(max_length=255)
    text = models.TextField()

    def __str__(self):
        return f'{self.document_revision} Policy Section: {self.header}'

--- END FILE: documents/models.py ---


--- START FILE: documents/tests.py ---

from django.test import TestCase

# Create your tests here.


--- END FILE: documents/tests.py ---


--- START FILE: documents/choices.py ---

DESIGN_OWNERSHIP_CHOICES = [
    ("SELF", "We own the design."),
    ("ELSE", "Design is owned by someone else."),
]

MANUFACTURING_OPTIONS_CHOICES = [
    ("SELF", "Only we manufacture this part."),
    ("ELSE", "We source this part externally."),
    ("BOTH", "Both we and someone else are able to manufacture this part."),
]

FINISHED_DEVICE_CHOICES = [
    ("NO", "This is not a finished device."),
    ("NONSHIPPABLE", "This is or contains finished device(s), but is not yet shippable."),
    ("SHIPPABLE", "This is or contains finished device(s) and is shippable."),
]

--- END FILE: documents/choices.py ---


--- START FILE: documents/views.py ---

from django.shortcuts import render

# Create your views here.


--- END FILE: documents/views.py ---


--- START FILE: documents/__init__.py ---



--- END FILE: documents/__init__.py ---


--- START FILE: documents/apps.py ---

from django.apps import AppConfig


class DocumentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'documents'


--- END FILE: documents/apps.py ---


--- START FILE: users/admin.py ---

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser

class CustomUserAdmin(UserAdmin):
    # Add the 'nickname' field to the list display, form, and fieldsets
    model = CustomUser
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'nickname') # Add nickname here

    # Add nickname to the fieldsets displayed on the change user page
    # Copy the default fieldsets and add nickname to the appropriate section
    # (usually the first one with username, first_name, last_name, email)
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        ('Personal info', {'fields': ('first_name', 'last_name', 'email', 'nickname')}), # Add nickname here
        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Important dates', {'fields': ('last_login', 'date_joined')}),
    )

    # Add nickname to the fieldsets displayed on the add user page
    add_fieldsets = UserAdmin.add_fieldsets + (
        (None, {'fields': ('nickname',)}),
    )


# Register your CustomUser model with the customized admin class
admin.site.register(CustomUser, CustomUserAdmin)


--- END FILE: users/admin.py ---


--- START FILE: users/models.py ---

from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    nickname = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return self.username


--- END FILE: users/models.py ---


--- START FILE: users/tests.py ---

from django.test import TestCase

# Create your tests here.


--- END FILE: users/tests.py ---


--- START FILE: users/views.py ---

from django.shortcuts import render

# Create your views here.


--- END FILE: users/views.py ---


--- START FILE: users/__init__.py ---



--- END FILE: users/__init__.py ---


--- START FILE: users/apps.py ---

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


--- END FILE: users/apps.py ---


--- START FILE: templates/base.html ---

{% load static %} {# Make sure to load static files tag #}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>{% block title %}QMS Tool{% endblock title %}</title> {# Default title, block for overriding #}

    <!-- Bootstrap CSS (CDN) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    
    {# --- OR --- Use Django static files for Bootstrap CSS (Recommended for production) #}
    {# First, download Bootstrap files and place them in your static directory #}
    {# Then uncomment this line and comment out the CDN link above: #}
    {# <link rel="stylesheet" href="{% static 'path/to/your/bootstrap.min.css' %}"> #}

    <!-- Optional: Link to your custom CSS file -->
    <link rel="stylesheet" href="{% static 'css/custom.css' %}"> {# Assumes you have a static/css/custom.css file #}

    {# Block for page-specific CSS or meta tags in the head #}
    {% block extra_head %}{% endblock extra_head %}

    {# HTMX Script (CDN) - Place in head or body, head is common for detection #}
    <script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>

    {# --- OR --- Use Django static files for HTMX #}
    {# <script src="{% static 'path/to/your/htmx.min.js' %}"></script> #}

</head>
<body class="d-flex flex-column min-vh-100"> {# Basic structure for sticky footer if needed #}

    {# Add CSRF token header for HTMX POST/PUT/DELETE requests #}
    <script>
        document.body.addEventListener('htmx:configRequest', (event) => {
          event.detail.headers['X-CSRFToken'] = '{{ csrf_token }}';
        })
    </script>

    <header>
        {# Optional: Add a Bootstrap Navbar here #}
        {# Example: include a separate template for the navbar #}
        {# {% include 'partials/_navbar.html' %} #}
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
            <div class="container">
                <a class="navbar-brand" href="/">QMS Tool</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="/">Home</a>
                        </li>
                        {# Add other nav links here #}
                        {# <li class="nav-item"> #}
                        {#    <a class="nav-link" href="{% url 'some_view_name' %}">Some Page</a> #}
                        {# </li> #}
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="container flex-grow-1"> {# Main content area with Bootstrap container #}
        {# Display Django messages framework messages #}
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endif %}

        {# The main content block where child templates will insert their content #}
        {% block content %}
            <p>Default content. Override this block in child templates.</p>
        {% endblock content %}
    </main>

    <footer class="mt-auto py-3 bg-light text-center"> {# Basic sticky footer using flex classes on body #}
        <div class="container">
            <span class="text-muted">© {% now "Y" %} Your Company Name</span>
            {# {% block footer %}{% endblock footer %} #} {# Optional block for footer content #}
        </div>
    </footer>

    <!-- Bootstrap JS Bundle (includes Popper.js) (CDN) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    
    {# --- OR --- Use Django static files for Bootstrap JS #}
    {# <script src="{% static 'path/to/your/bootstrap.bundle.min.js' %}"></script> #}

    {# Optional: Link to your custom JavaScript file #}
    {# <script src="{% static 'js/custom.js' %}"></script> #}

    {# Block for page-specific JavaScript #}
    {% block extra_js %}{% endblock extra_js %}

</body>
</html>

--- END FILE: templates/base.html ---


--- START FILE: tqms/asgi.py ---

"""
ASGI config for tqms project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tqms.settings')

application = get_asgi_application()


--- END FILE: tqms/asgi.py ---


--- START FILE: tqms/urls.py ---

"""
URL configuration for tqms project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]


--- END FILE: tqms/urls.py ---


--- START FILE: tqms/settings.py ---

"""
Django settings for tqms project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y@zbpn8h1arnmdj8ackk@_6lk703ev%jh$&o1f18izms4i#&#s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'organization',
    'documents',
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tqms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tqms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.CustomUser'


--- END FILE: tqms/settings.py ---


--- START FILE: tqms/__init__.py ---



--- END FILE: tqms/__init__.py ---


--- START FILE: tqms/wsgi.py ---

"""
WSGI config for tqms project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tqms.settings')

application = get_wsgi_application()


--- END FILE: tqms/wsgi.py ---


--- START FILE: organization/admin.py ---

from django.contrib import admin
from .models import Role, Location

admin.site.register(Role)
admin.site.register(Location)

--- END FILE: organization/admin.py ---


--- START FILE: organization/models.py ---

from django.db import models

class Role(models.Model):
    name = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.name

class Location(models.Model):
    name = models.CharField(max_length=255, unique=True)
    registered_location = models.BooleanField(default=False)

    def __str__(self):
        return self.name


--- END FILE: organization/models.py ---


--- START FILE: organization/tests.py ---

from django.test import TestCase

# Create your tests here.


--- END FILE: organization/tests.py ---


--- START FILE: organization/views.py ---

from django.shortcuts import render

# Create your views here.


--- END FILE: organization/views.py ---


--- START FILE: organization/__init__.py ---



--- END FILE: organization/__init__.py ---


--- START FILE: organization/apps.py ---

from django.apps import AppConfig


class OrganizationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'organization'


--- END FILE: organization/apps.py ---


